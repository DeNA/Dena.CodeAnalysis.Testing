// (c) 2021 DeNA Co., Ltd.

using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Dena.CodeAnalysis.CSharp.Testing
{
    public static class DiagnosticsAssert
    {
        /// <summary>
        /// Return formatted string extract from Diagnostic.
        /// - File path (e.g., path/to/file.cs)
        /// - Location of the Diagnostic (starting line number, starting character position)-(finishing line number, finishing character position)
        /// - Identifier of the DiagnosticDescriptor (DDID) (e.g., CS1002)
        /// - DiagnosticMessage (e.g., ; expected)
        /// </summary>
        /// <param name="diagnostic">Diagnostic generated by the analyzer</param>
        /// <returns>
        /// Example:
        /// <c>path/to/file.cs: (start-line,start-col)-(end-line,end-col), DDID, DiagnosticMessage</c>
        /// </returns>
        private static string FormatDiagnostic(Diagnostic diagnostic)
        {
            return $"{diagnostic.Location.GetLineSpan().Path}: " +
                   $"{"(" + diagnostic.Location.GetLineSpan().Span.Start.Line + "," + diagnostic.Location.GetLineSpan().Span.Start.Character + ")-"}" +
                   $"{"(" + diagnostic.Location.GetLineSpan().Span.End.Line + "," + diagnostic.Location.GetLineSpan().Span.End.Character + ")"}, " +
                   $"{diagnostic.Id}, " +
                   $"{diagnostic.GetMessage()}";
        }

        /// <summary>
        /// DiagnosticAssert.AreEqual assert that collections of diagnostics for equality.
        /// Throw an AssertException if given collections satisfy the following condition:
        /// Elements that are only contained on one side. The equivalence is based on following properties
        /// - File path (e.g., path/to/file.cs)
        /// - Location of the Diagnostic (starting line number, starting character position)-(finishing line number, finishing character position)
        /// - Identifier of the DiagnosticDescriptor (DDID) (e.g., CS0494)
        /// - DiagnosticMessage (e.g., The field 'C.hoge' is assigned but its value is never used)
        /// Otherwise, do nothing.
        /// </summary>
        /// <param name="expected">expected diagnostics</param>
        /// <param name="actual">actual diagnostics</param>
        public static void AreEqual(IEnumerable<Diagnostic> expected, IEnumerable<Diagnostic> actual)
        {
            var actualDiagnostics = actual.Select(FormatDiagnostic).ToHashSet();
            var expectDiagnostics = expected.Select(FormatDiagnostic).ToHashSet();

            var extra = new HashSet<string>(actualDiagnostics);
            extra.ExceptWith(expectDiagnostics);

            var missing = new HashSet<string>(expectDiagnostics);
            missing.ExceptWith(actualDiagnostics);

            if (extra.Count == 0 && missing.Count == 0) return;
            Assert.Fail(CreateFailureMessageWhenAreNotEqual(missing, extra, actualDiagnostics));
        }

        /// <summary>
        /// DiagnosticAssert.IsEmpty assert that the diagnostic is no exist.
        /// Throw an AssertException if given collections exist any Diagnostic.
        /// The output format and equivalence is the same as DiagnosticAssert.AreEqual.
        /// Otherwise, do nothing.
        /// </summary>
        /// <param name="diagnostics">DiagnosticReports returned by the analyzer</param>
        public static void IsEmpty(IEnumerable<Diagnostic> diagnostics)
        {
            if (!diagnostics.Any())
            {
                return;
            }

            Assert.Fail(CreateFailureMessageWhenIsNotEmpty(diagnostics));
        }

        private static string CreateFailureMessageWhenIsNotEmpty(IEnumerable<Diagnostic> diagnostics)
        {
            var formatDiagnostics = diagnostics.Select(FormatDiagnostic).ToHashSet();
            var builder = new StringBuilder();
            builder.AppendLine(
                $"expected no diagnostics, but {formatDiagnostics.Count} diagnostics are reported"
            );

            foreach (var formatDiagnostic in formatDiagnostics)
            {
                builder.AppendLine($"\textra\t{formatDiagnostic}");
            }

            return builder.ToString();
        }

        private static string CreateFailureMessageWhenAreNotEqual(HashSet<string> missing, HashSet<string> extra,
            HashSet<string> allDiagnostics)
        {
            var builder = new StringBuilder();
            builder.AppendLine(
                $"Missing {missing.Count} diagnostics, extra {extra.Count} diagnostics of all {allDiagnostics.Count} diagnostics:"
            );

            foreach (var missingDiagnostic in missing)
            {
                builder.AppendLine($"\tmissing\t{missingDiagnostic}");
            }

            foreach (var extraDiagnostic in extra)
            {
                builder.AppendLine($"\textra\t{extraDiagnostic}");
            }

            return builder.ToString();
        }
    }
}